extends MeshInstance3D
@export var terrain : Terrain
@export var world_chunks_x : int = 1
@export var world_chunks_y : int = 1
@export var world_chunks_z: int = 1
@export var render_distance : int = 1
@export var chunk_iterations : int = 30
@export var chunk_step : float = 1.0
@export var player : Node3D

#DO SHADER
var thread : Thread
var unready_chunks : Dictionary
var chunks : Dictionary
var surface_tool : SurfaceTool
var current_chunk_id : Vector3i
var mesh_instances : Dictionary
var loaded_chunks : Array

var corner_offsets : Array = [Vector3i(0, 0, 0), Vector3i(1, 0, 0), Vector3i(0, 1, 0), Vector3i(1, 1, 0), Vector3i(0, 0, 1), Vector3i(1, 0, 1), Vector3i(0, 1, 1), Vector3i(1, 1, 1)]

var triangle_table : Array = [
	[],
	[ 3, 8, 0 ],
	[ 1, 0, 9 ],
	[ 9, 1, 8, 8, 1, 3 ],
	[ 3, 2, 11 ],
	[ 2, 11, 0, 0, 11, 8 ],
	[ 1, 0, 9, 3, 2, 11 ],
	[ 11, 1, 2, 11, 9, 1, 11, 8, 9 ],
	[ 10, 2, 1 ],
	[ 2, 1, 10, 0, 3, 8 ],
	[ 0, 9, 2, 2, 9, 10 ],
	[ 8, 2, 3, 8, 10, 2, 8, 9, 10 ],
	[ 1, 10, 3, 3, 10, 11 ],
	[ 10, 0, 1, 10, 8, 0, 10, 11, 8 ],
	[ 9, 3, 0, 9, 11, 3, 9, 10, 11 ],
	[ 9, 10, 8, 8, 10, 11 ],
	[ 7, 4, 8 ],
	[ 0, 3, 4, 4, 3, 7 ],
	[ 0, 9, 1, 4, 8, 7 ],
	[ 1, 4, 9, 1, 7, 4, 1, 3, 7 ],
	[ 11, 3, 2, 8, 7, 4 ],
	[ 4, 11, 7, 4, 2, 11, 4, 0, 2 ],
	[ 3, 2, 11, 0, 9, 1, 4, 8, 7 ],
	[ 9, 1, 4, 4, 1, 7, 7, 1, 2, 7, 2, 11 ],
	[ 7, 4, 8, 1, 10, 2 ],
	[ 7, 4, 3, 3, 4, 0, 10, 2, 1 ],
	[ 10, 2, 9, 9, 2, 0, 7, 4, 8 ],
	[ 7, 4, 9, 7, 9, 2, 9, 10, 2, 3, 7, 2 ],
	[ 1, 10, 3, 3, 10, 11, 4, 8, 7 ],
	[ 4, 0, 7, 0, 1, 10, 7, 0, 10, 7, 10, 11 ],
	[ 7, 4, 8, 9, 3, 0, 9, 11, 3, 9, 10, 11 ],
	[ 7, 4, 11, 4, 9, 11, 9, 10, 11 ],
	[ 5, 9, 4 ],
	[ 8, 0, 3, 9, 4, 5 ],
	[ 1, 0, 5, 5, 0, 4 ],
	[ 5, 8, 4, 5, 3, 8, 5, 1, 3 ],
	[ 3, 2, 11, 5, 9, 4 ],
	[ 2, 11, 0, 0, 11, 8, 5, 9, 4 ],
	[ 4, 5, 0, 0, 5, 1, 11, 3, 2 ],
	[ 11, 8, 2, 8, 4, 5, 2, 8, 5, 2, 5, 1 ],
	[ 5, 9, 4, 1, 10, 2 ],
	[ 0, 3, 8, 1, 10, 2, 5, 9, 4 ],
	[ 2, 5, 10, 2, 4, 5, 2, 0, 4 ],
	[ 4, 5, 8, 8, 5, 3, 3, 5, 10, 3, 10, 2 ],
	[ 11, 3, 10, 10, 3, 1, 4, 5, 9 ],
	[ 4, 5, 9, 10, 0, 1, 10, 8, 0, 10, 11, 8 ],
	[ 4, 5, 10, 4, 10, 3, 10, 11, 3, 0, 4, 3 ],
	[ 4, 5, 8, 5, 10, 8, 10, 11, 8 ],
	[ 5, 9, 7, 7, 9, 8 ],
	[ 3, 9, 0, 3, 5, 9, 3, 7, 5 ],
	[ 7, 0, 8, 7, 1, 0, 7, 5, 1 ],
	[ 3, 7, 1, 1, 7, 5 ],
	[ 5, 9, 7, 7, 9, 8, 2, 11, 3 ],
	[ 5, 9, 0, 5, 0, 11, 0, 2, 11, 7, 5, 11 ],
	[ 2, 11, 3, 7, 0, 8, 7, 1, 0, 7, 5, 1 ],
	[ 2, 11, 1, 11, 7, 1, 7, 5, 1 ],
	[ 8, 7, 9, 9, 7, 5, 2, 1, 10 ],
	[ 10, 2, 1, 3, 9, 0, 3, 5, 9, 3, 7, 5 ],
	[ 2, 0, 10, 0, 8, 7, 10, 0, 7, 10, 7, 5 ],
	[ 10, 2, 5, 2, 3, 5, 3, 7, 5 ],
	[ 5, 9, 8, 5, 8, 7, 1, 10, 3, 10, 11, 3 ],
	[ 1, 10, 0, 0, 10, 11, 0, 11, 7, 0, 7, 5, 0, 5, 9 ],
	[ 8, 7, 0, 0, 7, 5, 0, 5, 10, 0, 10, 11, 0, 11, 3 ],
	[ 5, 11, 7, 10, 11, 5 ],
	[ 11, 6, 7 ],
	[ 3, 8, 0, 7, 11, 6 ],
	[ 1, 0, 9, 7, 11, 6 ],
	[ 9, 1, 8, 8, 1, 3, 6, 7, 11 ],
	[ 6, 7, 2, 2, 7, 3 ],
	[ 0, 7, 8, 0, 6, 7, 0, 2, 6 ],
	[ 6, 7, 2, 2, 7, 3, 9, 1, 0 ],
	[ 9, 1, 2, 9, 2, 7, 2, 6, 7, 8, 9, 7 ],
	[ 10, 2, 1, 11, 6, 7 ],
	[ 2, 1, 10, 3, 8, 0, 7, 11, 6 ],
	[ 0, 9, 2, 2, 9, 10, 7, 11, 6 ],
	[ 6, 7, 11, 8, 2, 3, 8, 10, 2, 8, 9, 10 ],
	[ 7, 10, 6, 7, 1, 10, 7, 3, 1 ],
	[ 1, 10, 0, 0, 10, 8, 8, 10, 6, 8, 6, 7 ],
	[ 9, 10, 0, 10, 6, 7, 0, 10, 7, 0, 7, 3 ],
	[ 6, 7, 10, 7, 8, 10, 8, 9, 10 ],
	[ 4, 8, 6, 6, 8, 11 ],
	[ 6, 3, 11, 6, 0, 3, 6, 4, 0 ],
	[ 11, 6, 8, 8, 6, 4, 1, 0, 9 ],
	[ 6, 4, 11, 4, 9, 1, 11, 4, 1, 11, 1, 3 ],
	[ 2, 8, 3, 2, 4, 8, 2, 6, 4 ],
	[ 0, 2, 4, 4, 2, 6 ],
	[ 9, 1, 0, 2, 8, 3, 2, 4, 8, 2, 6, 4 ],
	[ 9, 1, 4, 1, 2, 4, 2, 6, 4 ],
	[ 4, 8, 6, 6, 8, 11, 1, 10, 2 ],
	[ 1, 10, 2, 6, 3, 11, 6, 0, 3, 6, 4, 0 ],
	[ 0, 9, 10, 0, 10, 2, 4, 8, 6, 8, 11, 6 ],
	[ 11, 6, 3, 3, 6, 4, 3, 4, 9, 3, 9, 10, 3, 10, 2 ],
	[ 1, 10, 6, 1, 6, 8, 6, 4, 8, 3, 1, 8 ],
	[ 1, 10, 0, 10, 6, 0, 6, 4, 0 ],
	[ 0, 9, 3, 3, 9, 10, 3, 10, 6, 3, 6, 4, 3, 4, 8 ],
	[ 4, 10, 6, 9, 10, 4 ],
	[ 4, 5, 9, 6, 7, 11 ],
	[ 7, 11, 6, 8, 0, 3, 9, 4, 5 ],
	[ 1, 0, 5, 5, 0, 4, 11, 6, 7 ],
	[ 11, 6, 7, 5, 8, 4, 5, 3, 8, 5, 1, 3 ],
	[ 3, 2, 7, 7, 2, 6, 9, 4, 5 ],
	[ 5, 9, 4, 0, 7, 8, 0, 6, 7, 0, 2, 6 ],
	[ 1, 0, 4, 1, 4, 5, 3, 2, 7, 2, 6, 7 ],
	[ 4, 5, 8, 8, 5, 1, 8, 1, 2, 8, 2, 6, 8, 6, 7 ],
	[ 6, 7, 11, 5, 9, 4, 1, 10, 2 ],
	[ 5, 9, 4, 7, 11, 6, 0, 3, 8, 2, 1, 10 ],
	[ 7, 11, 6, 2, 5, 10, 2, 4, 5, 2, 0, 4 ],
	[ 6, 7, 11, 3, 8, 4, 3, 4, 5, 3, 5, 2, 2, 5, 10 ],
	[ 9, 4, 5, 7, 10, 6, 7, 1, 10, 7, 3, 1 ],
	[ 5, 9, 4, 8, 0, 1, 8, 1, 10, 8, 10, 7, 7, 10, 6 ],
	[ 6, 7, 10, 10, 7, 3, 10, 3, 0, 10, 0, 4, 10, 4, 5 ],
	[ 4, 5, 8, 8, 5, 10, 8, 10, 6, 8, 6, 7 ],
	[ 9, 6, 5, 9, 11, 6, 9, 8, 11 ],
	[ 0, 3, 9, 9, 3, 5, 5, 3, 11, 5, 11, 6 ],
	[ 1, 0, 8, 1, 8, 6, 8, 11, 6, 5, 1, 6 ],
	[ 11, 6, 3, 6, 5, 3, 5, 1, 3 ],
	[ 2, 6, 3, 6, 5, 9, 3, 6, 9, 3, 9, 8 ],
	[ 5, 9, 6, 9, 0, 6, 0, 2, 6 ],
	[ 3, 2, 8, 8, 2, 6, 8, 6, 5, 8, 5, 1, 8, 1, 0 ],
	[ 1, 6, 5, 2, 6, 1 ],
	[ 2, 1, 10, 9, 6, 5, 9, 11, 6, 9, 8, 11 ],
	[ 2, 1, 10, 5, 9, 0, 5, 0, 3, 5, 3, 6, 6, 3, 11 ],
	[ 10, 2, 5, 5, 2, 0, 5, 0, 8, 5, 8, 11, 5, 11, 6 ],
	[ 10, 2, 5, 5, 2, 3, 5, 3, 11, 5, 11, 6 ],
	[ 5, 9, 6, 6, 9, 8, 6, 8, 3, 6, 3, 1, 6, 1, 10 ],
	[ 5, 9, 6, 6, 9, 0, 6, 0, 1, 6, 1, 10 ],
	[ 8, 3, 0, 5, 10, 6 ],
	[ 6, 5, 10 ],
	[ 6, 10, 5 ],
	[ 3, 8, 0, 5, 6, 10 ],
	[ 9, 1, 0, 10, 5, 6 ],
	[ 3, 8, 1, 1, 8, 9, 6, 10, 5 ],
	[ 6, 10, 5, 2, 11, 3 ],
	[ 8, 0, 11, 11, 0, 2, 5, 6, 10 ],
	[ 10, 5, 6, 1, 0, 9, 3, 2, 11 ],
	[ 5, 6, 10, 11, 1, 2, 11, 9, 1, 11, 8, 9 ],
	[ 2, 1, 6, 6, 1, 5 ],
	[ 5, 6, 1, 1, 6, 2, 8, 0, 3 ],
	[ 6, 9, 5, 6, 0, 9, 6, 2, 0 ],
	[ 8, 9, 3, 9, 5, 6, 3, 9, 6, 3, 6, 2 ],
	[ 3, 6, 11, 3, 5, 6, 3, 1, 5 ],
	[ 5, 6, 11, 5, 11, 0, 11, 8, 0, 1, 5, 0 ],
	[ 0, 9, 3, 3, 9, 11, 11, 9, 5, 11, 5, 6 ],
	[ 5, 6, 9, 6, 11, 9, 11, 8, 9 ],
	[ 7, 4, 8, 5, 6, 10 ],
	[ 0, 3, 4, 4, 3, 7, 10, 5, 6 ],
	[ 4, 8, 7, 9, 1, 0, 10, 5, 6 ],
	[ 6, 10, 5, 1, 4, 9, 1, 7, 4, 1, 3, 7 ],
	[ 11, 3, 2, 7, 4, 8, 5, 6, 10 ],
	[ 10, 5, 6, 4, 11, 7, 4, 2, 11, 4, 0, 2 ],
	[ 7, 4, 8, 3, 2, 11, 9, 1, 0, 10, 5, 6 ],
	[ 10, 5, 6, 7, 4, 9, 7, 9, 1, 7, 1, 11, 11, 1, 2 ],
	[ 2, 1, 6, 6, 1, 5, 8, 7, 4 ],
	[ 7, 4, 0, 7, 0, 3, 5, 6, 1, 6, 2, 1 ],
	[ 8, 7, 4, 6, 9, 5, 6, 0, 9, 6, 2, 0 ],
	[ 5, 6, 9, 9, 6, 2, 9, 2, 3, 9, 3, 7, 9, 7, 4 ],
	[ 4, 8, 7, 3, 6, 11, 3, 5, 6, 3, 1, 5 ],
	[ 7, 4, 11, 11, 4, 0, 11, 0, 1, 11, 1, 5, 11, 5, 6 ],
	[ 4, 8, 7, 11, 3, 0, 11, 0, 9, 11, 9, 6, 6, 9, 5 ],
	[ 5, 6, 9, 9, 6, 11, 9, 11, 7, 9, 7, 4 ],
	[ 9, 4, 10, 10, 4, 6 ],
	[ 6, 10, 4, 4, 10, 9, 3, 8, 0 ],
	[ 0, 10, 1, 0, 6, 10, 0, 4, 6 ],
	[ 3, 8, 4, 3, 4, 10, 4, 6, 10, 1, 3, 10 ],
	[ 9, 4, 10, 10, 4, 6, 3, 2, 11 ],
	[ 8, 0, 2, 8, 2, 11, 9, 4, 10, 4, 6, 10 ],
	[ 11, 3, 2, 0, 10, 1, 0, 6, 10, 0, 4, 6 ],
	[ 2, 11, 1, 1, 11, 8, 1, 8, 4, 1, 4, 6, 1, 6, 10 ],
	[ 4, 1, 9, 4, 2, 1, 4, 6, 2 ],
	[ 3, 8, 0, 4, 1, 9, 4, 2, 1, 4, 6, 2 ],
	[ 4, 6, 0, 0, 6, 2 ],
	[ 3, 8, 2, 8, 4, 2, 4, 6, 2 ],
	[ 3, 1, 11, 1, 9, 4, 11, 1, 4, 11, 4, 6 ],
	[ 9, 4, 1, 1, 4, 6, 1, 6, 11, 1, 11, 8, 1, 8, 0 ],
	[ 11, 3, 6, 3, 0, 6, 0, 4, 6 ],
	[ 8, 6, 11, 4, 6, 8 ],
	[ 10, 7, 6, 10, 8, 7, 10, 9, 8 ],
	[ 10, 9, 6, 9, 0, 3, 6, 9, 3, 6, 3, 7 ],
	[ 8, 7, 0, 0, 7, 1, 1, 7, 6, 1, 6, 10 ],
	[ 6, 10, 7, 10, 1, 7, 1, 3, 7 ],
	[ 3, 2, 11, 10, 7, 6, 10, 8, 7, 10, 9, 8 ],
	[ 6, 10, 7, 7, 10, 9, 7, 9, 0, 7, 0, 2, 7, 2, 11 ],
	[ 11, 3, 2, 1, 0, 8, 1, 8, 7, 1, 7, 10, 10, 7, 6 ],
	[ 6, 10, 7, 7, 10, 1, 7, 1, 2, 7, 2, 11 ],
	[ 8, 7, 6, 8, 6, 1, 6, 2, 1, 9, 8, 1 ],
	[ 0, 3, 9, 9, 3, 7, 9, 7, 6, 9, 6, 2, 9, 2, 1 ],
	[ 8, 7, 0, 7, 6, 0, 6, 2, 0 ],
	[ 7, 2, 3, 6, 2, 7 ],
	[ 11, 3, 6, 6, 3, 1, 6, 1, 9, 6, 9, 8, 6, 8, 7 ],
	[ 11, 7, 6, 1, 9, 0 ],
	[ 11, 3, 6, 6, 3, 0, 6, 0, 8, 6, 8, 7 ],
	[ 11, 7, 6 ],
	[ 10, 5, 11, 11, 5, 7 ],
	[ 10, 5, 11, 11, 5, 7, 0, 3, 8 ],
	[ 7, 11, 5, 5, 11, 10, 0, 9, 1 ],
	[ 3, 8, 9, 3, 9, 1, 7, 11, 5, 11, 10, 5 ],
	[ 5, 2, 10, 5, 3, 2, 5, 7, 3 ],
	[ 0, 2, 8, 2, 10, 5, 8, 2, 5, 8, 5, 7 ],
	[ 0, 9, 1, 5, 2, 10, 5, 3, 2, 5, 7, 3 ],
	[ 10, 5, 2, 2, 5, 7, 2, 7, 8, 2, 8, 9, 2, 9, 1 ],
	[ 1, 11, 2, 1, 7, 11, 1, 5, 7 ],
	[ 8, 0, 3, 1, 11, 2, 1, 7, 11, 1, 5, 7 ],
	[ 0, 9, 5, 0, 5, 11, 5, 7, 11, 2, 0, 11 ],
	[ 3, 8, 2, 2, 8, 9, 2, 9, 5, 2, 5, 7, 2, 7, 11 ],
	[ 5, 7, 1, 1, 7, 3 ],
	[ 8, 0, 7, 0, 1, 7, 1, 5, 7 ],
	[ 0, 9, 3, 9, 5, 3, 5, 7, 3 ],
	[ 9, 7, 8, 5, 7, 9 ],
	[ 8, 5, 4, 8, 10, 5, 8, 11, 10 ],
	[ 10, 5, 4, 10, 4, 3, 4, 0, 3, 11, 10, 3 ],
	[ 1, 0, 9, 8, 5, 4, 8, 10, 5, 8, 11, 10 ],
	[ 9, 1, 4, 4, 1, 3, 4, 3, 11, 4, 11, 10, 4, 10, 5 ],
	[ 10, 5, 2, 2, 5, 3, 3, 5, 4, 3, 4, 8 ],
	[ 10, 5, 2, 5, 4, 2, 4, 0, 2 ],
	[ 9, 1, 0, 3, 2, 10, 3, 10, 5, 3, 5, 8, 8, 5, 4 ],
	[ 10, 5, 2, 2, 5, 4, 2, 4, 9, 2, 9, 1 ],
	[ 1, 5, 2, 5, 4, 8, 2, 5, 8, 2, 8, 11 ],
	[ 2, 1, 11, 11, 1, 5, 11, 5, 4, 11, 4, 0, 11, 0, 3 ],
	[ 4, 8, 5, 5, 8, 11, 5, 11, 2, 5, 2, 0, 5, 0, 9 ],
	[ 5, 4, 9, 2, 3, 11 ],
	[ 4, 8, 5, 8, 3, 5, 3, 1, 5 ],
	[ 0, 5, 4, 1, 5, 0 ],
	[ 0, 9, 3, 3, 9, 5, 3, 5, 4, 3, 4, 8 ],
	[ 5, 4, 9 ],
	[ 11, 4, 7, 11, 9, 4, 11, 10, 9 ],
	[ 0, 3, 8, 11, 4, 7, 11, 9, 4, 11, 10, 9 ],
	[ 0, 4, 1, 4, 7, 11, 1, 4, 11, 1, 11, 10 ],
	[ 7, 11, 4, 4, 11, 10, 4, 10, 1, 4, 1, 3, 4, 3, 8 ],
	[ 9, 4, 7, 9, 7, 2, 7, 3, 2, 10, 9, 2 ],
	[ 8, 0, 7, 7, 0, 2, 7, 2, 10, 7, 10, 9, 7, 9, 4 ],
	[ 1, 0, 10, 10, 0, 4, 10, 4, 7, 10, 7, 3, 10, 3, 2 ],
	[ 7, 8, 4, 10, 1, 2 ],
	[ 9, 4, 1, 1, 4, 2, 2, 4, 7, 2, 7, 11 ],
	[ 8, 0, 3, 2, 1, 9, 2, 9, 4, 2, 4, 11, 11, 4, 7 ],
	[ 7, 11, 4, 11, 2, 4, 2, 0, 4 ],
	[ 3, 8, 2, 2, 8, 4, 2, 4, 7, 2, 7, 11 ],
	[ 9, 4, 1, 4, 7, 1, 7, 3, 1 ],
	[ 9, 4, 1, 1, 4, 7, 1, 7, 8, 1, 8, 0 ],
	[ 3, 4, 7, 0, 4, 3 ],
	[ 7, 8, 4 ],
	[ 8, 11, 9, 9, 11, 10 ],
	[ 0, 3, 9, 3, 11, 9, 11, 10, 9 ],
	[ 1, 0, 10, 0, 8, 10, 8, 11, 10 ],
	[ 10, 3, 11, 1, 3, 10 ],
	[ 3, 2, 8, 2, 10, 8, 10, 9, 8 ],
	[ 9, 2, 10, 0, 2, 9 ],
	[ 1, 0, 10, 10, 0, 8, 10, 8, 3, 10, 3, 2 ],
	[ 2, 10, 1 ],
	[ 2, 1, 11, 1, 9, 11, 9, 8, 11 ],
	[ 2, 1, 11, 11, 1, 9, 11, 9, 0, 11, 0, 3 ],
	[ 11, 0, 8, 2, 0, 11 ],
	[ 3, 11, 2 ],
	[ 1, 8, 3, 9, 8, 1 ],
	[ 1, 9, 0 ],
	[ 8, 3, 0 ],
	[],
]

var edge_vertex_table : Array = [
	[0, 1],
	[1, 3],
	[3, 2],
	[2, 0],
	[4, 5],
	[5, 7],
	[7, 6],
	[6, 4],
	[0, 4],
	[1, 5],
	[3, 7],
	[2, 6],
]

var points : Dictionary

func _ready():
	thread = Thread.new()
	surface_tool = SurfaceTool.new()
	for x in range(-render_distance, render_distance+1):
		for y in range(-render_distance, render_distance+1):
			for z in range(-render_distance, render_distance+1):
				var mesh_instance : MeshInstance3D = MeshInstance3D.new()
				mesh_instances[Vector3i(x, y, z)] = mesh_instance
				self.add_child(mesh_instance)

func _process(delta):
	var player_chunk_id : Vector3i = Vector3i((player.global_position / (chunk_iterations * chunk_step)).floor())
	
	if player_chunk_id not in chunks:
		start_chunk(player_chunk_id)
	elif mesh_instances[Vector3i(0, 0, 0)].mesh != chunks[player_chunk_id].mesh:
		display_chunk(player_chunk_id, mesh_instances[Vector3i(0, 0, 0)])
	for x in range(-render_distance, render_distance+1):
		for y in range(-render_distance, render_distance+1):
			for z in range(-render_distance, render_distance+1):
				if Vector3i(x, y, z) == Vector3i.ZERO:
					continue
				var chunk_id = player_chunk_id + Vector3i(x, y, z)
				var mesh_id = Vector3i(x, y, z)
				if chunk_id not in chunks:
					start_chunk(chunk_id)
				elif mesh_instances[mesh_id].mesh != chunks[chunk_id].mesh:
					display_chunk(chunk_id, mesh_instances[Vector3i(x, y, z)])

func start_chunk(chunk_id : Vector3i):
	if chunks.has(chunk_id) or unready_chunks.has(chunk_id):
		return
	if not thread.is_started():
		unready_chunks[chunk_id] = 1
		thread.start(generate_chunk.bind(chunk_id))

func generate_chunk(chunk_id : Vector3i):
	var chunk = Chunk.new()
	var chunk_origin = chunk_id * chunk_iterations * chunk_step
	
	for x in range(chunk_iterations + 1):
		chunk.points.append([])
		for y in range(chunk_iterations + 1):
			chunk.points[x].append([])
			for z in range(chunk_iterations + 1):
				var point = Vector3(x, y, z) * chunk_step + chunk_origin
				var value = terrain.get_value(point)
				chunk.points[x][y].append(value)
				
	surface_tool.clear()
	surface_tool.begin(Mesh.PRIMITIVE_TRIANGLES)
	march_cubes(chunk)
	create_mesh(chunk)
	chunks[chunk_id] = chunk
	unready_chunks.erase(chunk_id)
	call_deferred("thread_complete")

func thread_complete():
	if thread.is_alive() == false:
		thread.wait_to_finish()

func display_chunk(chunk_id : Vector3i, mesh_instance : MeshInstance3D):
	mesh_instance.global_position = Vector3(chunk_id * chunk_iterations * chunk_step)
	mesh_instance.mesh = null
	mesh_instance.mesh = chunks[chunk_id].mesh

func march_cubes(chunk: Chunk):
	for x in range(chunk_iterations):
		for y in range(chunk_iterations):
			for z in range(chunk_iterations):
				var origin = Vector3i(x, y, z)
				var cube_index = 0
				for i in range(8):
					var corner_value = chunk.points[x + corner_offsets[i].x][y + corner_offsets[i].y][z + corner_offsets[i].z]
					if corner_value < 0.0:
						cube_index |= 1 << i

				var triangulation : Array = triangle_table[cube_index]
				for edge_index in triangulation:
					var edge = edge_vertex_table[edge_index]
					var posA = origin + corner_offsets[edge[0]]
					var posB = origin + corner_offsets[edge[1]]
					var valueA = chunk.points[posA.x][posA.y][posA.z]
					var valueB = chunk.points[posB.x][posB.y][posB.z]
					
					var ratio = inverse_lerp(valueA, valueB, 0)
					
					var pos : Vector3 = lerp(posA * 1.0, posB * 1.0, ratio) * chunk_step
					surface_tool.add_vertex(pos)

func create_mesh(chunk: Chunk):
	chunk.mesh = null
	surface_tool.generate_normals()
	surface_tool.index()
	chunk.mesh = surface_tool.commit()
